{"ast":null,"code":"import { Router } from '@angular/router';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { TypeServiceService } from '../../../../services/type-service.service';\nimport { ServiceDetailService } from 'src/app/services/service-detail.service';\nimport { AdressService } from 'src/app/services/adress.service';\nimport { ServiceEService } from 'src/app/services/serviceE.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { TransactionService } from 'src/app/services/transaction.service';\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../../services/type-service.service\";\nimport * as i3 from \"src/app/services/service-detail.service\";\nimport * as i4 from \"src/app/services/adress.service\";\nimport * as i5 from \"src/app/services/serviceE.service\";\nimport * as i6 from \"src/app/services/user.service\";\nimport * as i7 from \"src/app/services/transaction.service\";\nimport * as i8 from \"ngx-toastr\";\nconst _c0 = () => [\"/profile/client/records\"];\nconst _c1 = () => [\"/logout\"];\nfunction ServiceComponent_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ad_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", ad_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\"\", ad_r1.adressId, \" - \", ad_r1.description, \"\");\n  }\n}\nfunction ServiceComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ts_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", ts_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\"\", ts_r2.typeServiceId, \" - \", ts_r2.serviceName, \"\");\n  }\n}\nexport let ServiceComponent = /*#__PURE__*/(() => {\n  class ServiceComponent {\n    constructor(router, typeServiceService, serviceDetailService, adressService, serviceEService, userService, transactionService, toastr) {\n      this.router = router;\n      this.typeServiceService = typeServiceService;\n      this.serviceDetailService = serviceDetailService;\n      this.adressService = adressService;\n      this.serviceEService = serviceEService;\n      this.userService = userService;\n      this.transactionService = transactionService;\n      this.toastr = toastr;\n      this.serviceForm = new FormGroup({\n        adress: new FormControl('', Validators.email),\n        time: new FormControl(),\n        selectTypeService: new FormControl(),\n        date: new FormControl(),\n        payment: new FormControl(),\n        price: new FormControl(''),\n        servicesQuantity: new FormControl('0', Validators.maxLength(1)),\n        totalPrice: new FormControl('')\n      });\n      this.onSubmit = () => {\n        if (this.serviceForm.get('servicesQuantity').value == \"0\" || Number(this.serviceForm.get('servicesQuantity').value) > 3) {\n          this.toastr.warning(\"The minimun Service Quantity field must be between 1 and 3, please check...\", 'Messages: ');\n          return;\n        }\n        this.userService.getUser(Number(this.userId)).subscribe(u => {\n          this.userToSave = u;\n        });\n        //save direction\n        const adressToSave = this.adresses.find(ad => ad.adressId == this.adressIdFind);\n        //save service\n        const service = {\n          typeService: this.typeServiceToSave,\n          state: 'N'\n        };\n        this.serviceEService.saveServiceE(service).subscribe(res => {\n          service.serviceId = res[\"recordId\"];\n        });\n        //save transaction\n        const transaction = {\n          typeTransaction: \"1\",\n          state: \"1\"\n        };\n        this.transactionService.saveTransaction(transaction).subscribe(res => {\n          transaction.transactionId = res[\"recordId\"];\n        });\n        setTimeout(() => {\n          //save serviceDetail\n          const serviceDetailSave = {\n            service: service,\n            client: this.userToSave,\n            value: this.totalPrice,\n            date: this.serviceForm.get('date').value,\n            hour: this.serviceForm.get('time').value,\n            transaction,\n            quantity: this.serviceForm.get('servicesQuantity').value,\n            professional: this.userToSave,\n            //se guarda con el id del cliente mientras el profesional se asigna este servicio en las card, y se actualiza al id del profesional\n            adress: adressToSave\n          };\n          console.log(\"client to save: \" + serviceDetailSave.client.userId);\n          console.log(\"service to save: \" + serviceDetailSave.service.serviceId);\n          console.log(\"transaction to save: \" + serviceDetailSave.transaction.transactionId);\n          this.serviceDetailService.saveServiceDetail(serviceDetailSave);\n          this.toastr.success(\"This Service Was Saved successfully\", 'Messages: ');\n          this.router.navigate(['/profile/client/records']);\n        }, 4000);\n      };\n      this.typeServiceService.getTypeservices().subscribe(dataTypeServices => {\n        this.typeServices = dataTypeServices;\n        this.price = dataTypeServices[0].price;\n        this.typeServiceToSave = this.typeServices[0];\n      });\n    }\n    ngOnInit() {\n      if (!localStorage.getItem(\"UserSession\")) {\n        this.router.navigate(['/login']);\n      }\n      this.userId = localStorage.getItem(\"UserSession\");\n      this.adressService.getAdressByUser(Number(this.userId)).subscribe(dataAdresses => {\n        if (dataAdresses.length > 0) {\n          this.adresses = dataAdresses;\n          this.adressIdFind = this.adresses[0].adressId;\n        }\n      });\n      this.totalPrice = \"0\";\n    }\n    updateTotalPrice(e) {\n      const total = Number(this.price) * Number(this.serviceForm.get('servicesQuantity').value);\n      this.totalPrice = total.toString();\n    }\n    typeServiceSelected(e) {\n      this.typeServices.filter(ts => {\n        if (Number(ts.typeServiceId) - 1 === e.target.selectedIndex) {\n          this.price = ts.price;\n          this.typeServiceToSave = ts;\n        }\n      });\n    }\n    getAdress(e) {\n      this.adressIdFind = e.target.value.substr(0, 2);\n    }\n    static {\n      this.ɵfac = function ServiceComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ServiceComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.TypeServiceService), i0.ɵɵdirectiveInject(i3.ServiceDetailService), i0.ɵɵdirectiveInject(i4.AdressService), i0.ɵɵdirectiveInject(i5.ServiceEService), i0.ɵɵdirectiveInject(i6.UserService), i0.ɵɵdirectiveInject(i7.TransactionService), i0.ɵɵdirectiveInject(i8.ToastrService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ServiceComponent,\n        selectors: [[\"app-service\"]],\n        decls: 53,\n        vars: 16,\n        consts: [[1, \"container\", \"m-4\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"row\"], [\"href\", \"#\", 1, \"nav-link\", 3, \"routerLink\"], [1, \"container\"], [1, \"col\"], [\"for\", \"Adresses\"], [\"id\", \"adresses\", \"name\", \"adresses\", 1, \"form-control\", 3, \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"services\"], [\"id\", \"selectTypeService\", \"name\", \"selectTypeService\", 1, \"form-control\", 3, \"change\"], [\"for\", \"price\"], [\"type\", \"text\", \"formControlName\", \"price\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [\"for\", \"date\"], [\"type\", \"date\", \"formControlName\", \"date\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"time\"], [\"type\", \"time\", \"formControlName\", \"time\", \"required\", \"\", 1, \"form-control\"], [1, \"col-sm-4\"], [\"for\", \"servicesQuantity\"], [\"type\", \"text\", \"appNumerosTag\", \"\", \"formControlName\", \"servicesQuantity\", \"required\", \"\", 1, \"form-control\", 3, \"blur\"], [\"for\", \"totalPrice\"], [\"type\", \"text\", \"formControlName\", \"totalPrice\", \"readonly\", \"\", 1, \"form-control\", 3, \"value\"], [\"for\", \"payment\"], [\"type\", \"text\", \"value\", \"PSE\", \"formControlName\", \"payment\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [3, \"ngValue\"]],\n        template: function ServiceComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function ServiceComponent_Template_form_ngSubmit_1_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(2, \"h2\");\n            i0.ɵɵtext(3, \"Create Service\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"div\", 2)(5, \"a\", 3);\n            i0.ɵɵtext(6, \"Records\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"a\", 3);\n            i0.ɵɵtext(8, \"Log Out\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 2)(11, \"div\", 5)(12, \"label\", 6);\n            i0.ɵɵtext(13, \"User Adresses: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"select\", 7);\n            i0.ɵɵlistener(\"change\", function ServiceComponent_Template_select_change_14_listener($event) {\n              return ctx.getAdress($event);\n            });\n            i0.ɵɵtemplate(15, ServiceComponent_option_15_Template, 2, 3, \"option\", 8);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(16, \"div\", 2)(17, \"div\", 5)(18, \"label\", 9);\n            i0.ɵɵtext(19, \"Services: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(20, \"select\", 10);\n            i0.ɵɵlistener(\"change\", function ServiceComponent_Template_select_change_20_listener($event) {\n              return ctx.typeServiceSelected($event);\n            });\n            i0.ɵɵtemplate(21, ServiceComponent_option_21_Template, 2, 3, \"option\", 8);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(22, \"div\", 5)(23, \"label\", 11);\n            i0.ɵɵtext(24, \"Value: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(25, \"input\", 12);\n            i0.ɵɵpipe(26, \"currency\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(27, \"div\", 5)(28, \"label\", 13);\n            i0.ɵɵtext(29, \"Date: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(30, \"input\", 14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(31, \"div\", 5)(32, \"label\", 15);\n            i0.ɵɵtext(33, \"Time: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(34, \"input\", 16);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(35, \"hr\");\n            i0.ɵɵelementStart(36, \"div\", 2)(37, \"div\", 17)(38, \"label\", 18);\n            i0.ɵɵtext(39, \"Services Quantity\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(40, \"input\", 19);\n            i0.ɵɵlistener(\"blur\", function ServiceComponent_Template_input_blur_40_listener($event) {\n              return ctx.updateTotalPrice($event);\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(41, \"div\", 5)(42, \"label\", 20);\n            i0.ɵɵtext(43, \"Total Price: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(44, \"input\", 21);\n            i0.ɵɵpipe(45, \"currency\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"div\", 5)(47, \"label\", 22);\n            i0.ɵɵtext(48, \"Payment Method: \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(49, \"input\", 23);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelement(50, \"br\");\n            i0.ɵɵelementStart(51, \"button\", 24);\n            i0.ɵɵtext(52, \"Create\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"formGroup\", ctx.serviceForm);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(14, _c0));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(15, _c1));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"ngForOf\", ctx.adresses);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"ngForOf\", ctx.typeServices);\n            i0.ɵɵadvance(4);\n            i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind2(26, 8, ctx.price, \"COP\"));\n            i0.ɵɵadvance(19);\n            i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind2(45, 11, ctx.totalPrice, \"COP\"));\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"disabled\", !ctx.serviceForm.valid);\n          }\n        },\n        encapsulation: 2\n      });\n    }\n  }\n  return ServiceComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
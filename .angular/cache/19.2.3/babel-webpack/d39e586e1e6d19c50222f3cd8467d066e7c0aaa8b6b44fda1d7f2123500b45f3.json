{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TypeServiceService } from '../../../../services/type-service.service';\nimport { ServiceDetailService } from 'src/app/services/service-detail.service';\nimport { AdressService } from 'src/app/services/adress.service';\nimport { ServiceEService } from 'src/app/services/serviceE.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { TransactionService } from 'src/app/services/transaction.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nlet ServiceComponent = class ServiceComponent {\n  /*serviceForm = new FormGroup({\n    adress: new FormControl('',Validators.email),\n    time: new FormControl(),\n    selectTypeService: new FormControl(),\n    date: new FormControl(),\n    payment: new FormControl(),\n    price: new FormControl(''),\n    servicesQuantity: new FormControl('0', Validators.maxLength(1)),\n    totalPrice: new FormControl('')\n  });*/\n  constructor(router, typeServiceService, serviceDetailService, adressService, serviceEService, userService, transactionService, toastr, formBuilder) {\n    this.router = router;\n    this.typeServiceService = typeServiceService;\n    this.serviceDetailService = serviceDetailService;\n    this.adressService = adressService;\n    this.serviceEService = serviceEService;\n    this.userService = userService;\n    this.transactionService = transactionService;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.onSubmit = () => {\n      if (this.serviceForm.get('servicesQuantity').value == \"0\" || Number(this.serviceForm.get('servicesQuantity').value) > 3) {\n        this.toastr.warning(\"The minimun Service Quantity field must be between 1 and 3, please check...\", 'Messages: ');\n        return;\n      }\n      this.userService.getUser(Number(this.userId)).subscribe(u => {\n        this.userToSave = u;\n      });\n      //save direction\n      const adressToSave = this.adresses.find(ad => ad.adressId == this.adressIdFind);\n      //save service\n      const service = {\n        typeService: this.typeServiceToSave,\n        state: 'N'\n      };\n      this.serviceEService.saveServiceE(service).subscribe(res => {\n        service.serviceId = res[\"recordId\"];\n      });\n      //save transaction\n      const transaction = {\n        typeTransaction: \"1\",\n        state: \"1\"\n      };\n      this.transactionService.saveTransaction(transaction).subscribe(res => {\n        transaction.transactionId = res[\"recordId\"];\n      });\n      setTimeout(() => {\n        //save serviceDetail\n        const serviceDetailSave = {\n          service: service,\n          client: this.userToSave,\n          value: this.totalPrice,\n          date: this.serviceForm.get('date').value,\n          hour: this.serviceForm.get('time').value,\n          transaction,\n          quantity: this.serviceForm.get('servicesQuantity').value,\n          professional: this.userToSave,\n          //se guarda con el id del cliente mientras el profesional se asigna este servicio en las card, y se actualiza al id del profesional\n          adress: adressToSave\n        };\n        console.log(\"client to save: \" + serviceDetailSave.client.userId);\n        console.log(\"service to save: \" + serviceDetailSave.service.serviceId);\n        console.log(\"transaction to save: \" + serviceDetailSave.transaction.transactionId);\n        this.serviceDetailService.saveServiceDetail(serviceDetailSave);\n        this.toastr.success(\"This Service Was Saved successfully\", 'Messages: ');\n        this.router.navigate(['/profile/client/records']);\n      }, 4000);\n    };\n    this.serviceForm = this.formBuilder.group({\n      adress: ['', Validators.required],\n      time: ['', Validators.required],\n      selectTypeService: ['', Validators.required],\n      date: ['', Validators.required],\n      payment: ['', Validators.required],\n      price: [''],\n      servicesQuantity: ['0', Validators.maxLength(1)],\n      totalPrice: ['']\n    });\n    this.typeServiceService.getTypeservices().subscribe(dataTypeServices => {\n      this.typeServices = dataTypeServices;\n      this.price = dataTypeServices[0].price;\n      this.typeServiceToSave = this.typeServices[0];\n    });\n  }\n  ngOnInit() {\n    if (!localStorage.getItem(\"UserSession\")) {\n      this.router.navigate(['/login']);\n    }\n    this.userId = localStorage.getItem(\"UserSession\");\n    this.adressService.getAdressByUser(Number(this.userId)).subscribe(dataAdresses => {\n      if (dataAdresses.length > 0) {\n        this.adresses = dataAdresses;\n        this.adressIdFind = this.adresses[0].adressId;\n      }\n    });\n    this.totalPrice = \"0\";\n  }\n  updateTotalPrice(e) {\n    const total = Number(this.price) * Number(this.serviceForm.get('servicesQuantity').value);\n    this.totalPrice = total.toString();\n  }\n  typeServiceSelected(e) {\n    this.typeServices.filter(ts => {\n      if (Number(ts.typeServiceId) - 1 === e.target.selectedIndex) {\n        this.price = ts.price;\n        this.typeServiceToSave = ts;\n      }\n    });\n  }\n  getAdress(e) {\n    this.adressIdFind = e.target.value.substr(0, 2);\n  }\n};\nServiceComponent = __decorate([Component({\n  standalone: true,\n  imports: [RouterModule, CommonModule, ReactiveFormsModule],\n  selector: 'app-service',\n  templateUrl: './service.component.html',\n  styleUrls: ['./service.component.less']\n}), __metadata(\"design:paramtypes\", [Router, TypeServiceService, ServiceDetailService, AdressService, ServiceEService, UserService, TransactionService, ToastrService, FormBuilder])], ServiceComponent);\nexport { ServiceComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}